{"version":3,"sources":["content/HeaderComponent.tsx","content/WhyComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HeaderComponent","className","WhyComponent","props","state","childComponents","event","preventDefault","this","setState","target","forceUpdate","focusNextElement","element","tagName","toLowerCase","inputs","document","getElementsByTagName","index","length","isEqualNode","children","focus","awef","first","items","i","childId","id","push","onSubmit","e","handleSubmit","type","name","placeholder","String","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAYiBA,MATjB,WACI,OACI,4BAAQC,UAAU,cAEd,8C,4BCDSC,E,kDAEjB,WAAYC,GAAiB,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CACTC,gBAAiB,GAHG,E,yDAOPC,GAAmB,IAAD,OACnCA,EAAMC,iBAENC,KAAKC,SAAS,CACVJ,gBAAiBG,KAAKJ,MAAMC,gBAAkB,IAElD,IAAIK,EAASJ,EAAMI,OACnBF,KAAKG,aAAY,WACb,EAAKC,iBAAiBF,Q,uCAILG,GACrB,GAAc,MAAXA,EACH,GAAqC,UAAlCA,EAAQC,QAAQC,eAMnB,IADA,IAAMC,EAASC,SAASC,qBAAqB,SACpCC,EAAQ,EAAGA,EAAQH,EAAOI,SAAUD,EACzC,GAAGH,EAAOG,GAAOE,YAAYR,EAAQS,SAAS,IAE1C,YADAN,EAAOG,EAAQ,GAAGI,aAPrBV,EAAwBU,U,+BAgB7B,IAHM,IAAD,OACCC,GAA4B,IAArBhB,KAAKL,MAAMsB,MAAiB,kBAAoB,cACvDC,EAAQ,GACNC,EAAE,EAAGA,EAAEnB,KAAKJ,MAAMC,gBAAiBsB,IAAK,CAC5C,IAAMC,EAAUpB,KAAKL,MAAM0B,GAAS,IAAJF,EAAU,EAC1CD,EAAMI,KAAK,kBAAC5B,EAAD,CAAcuB,OAAO,EAAOI,GAAID,KAG/C,OACI,6BACI,0BAAM3B,UAAU,gBAAgB8B,SAAU,SAACC,GAAD,OAAQ,EAAKC,aAAaD,KAChE,2BAAOE,KAAK,OAAOC,KAAK,OAAOC,YAAaZ,EAAMK,GAAIQ,OAAO7B,KAAKL,MAAM0B,MACxE,wCAEJ,yBAAK5B,UAAU,0BACVyB,Q,GApDqBY,IAAMC,W,MCUjCC,MAVf,WACE,OACE,yBAAKvC,UAAU,OACb,kBAAC,EAAD,MACA,mEACA,kBAAC,EAAD,CAAcwB,OAAO,EAAMI,GAAI,MCCjBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bff2f9df.chunk.js","sourcesContent":["import React from 'react'\n// import logo from '../logo.svg'\n\nfunction HeaderComponent() {\n    return (\n        <header className=\"App-header\">\n            {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n            <h3>5 Why's Tool</h3>\n        </header>\n    );\n  }\n  \n  export default HeaderComponent;","import React, { FormEvent } from 'react'\nimport { render } from '@testing-library/react';\n\ntype MyProps = { first: boolean, id: number };\ntype MyState = { childComponents: number};\n\nexport default class WhyComponent extends React.Component<MyProps, MyState> {\n\n    constructor(props: MyProps) {\n        super(props)\n        this.state = {\n            childComponents: 0,\n        }\n    }\n\n    private handleSubmit(event: FormEvent) {\n        event.preventDefault();\n\n        this.setState({\n            childComponents: this.state.childComponents + 1\n        })\n        var target = event.target;\n        this.forceUpdate(() => {\n            this.focusNextElement(target as Element)\n        })\n    }\n\n    private focusNextElement(element: Element | null) {\n        if(element == null) return\n        if(element.tagName.toLowerCase() === \"input\") {\n            (element as HTMLElement).focus()\n            return\n        }\n\n        const inputs = document.getElementsByTagName('input');\n        for (let index = 0; index < inputs.length; ++index) {\n            if(inputs[index].isEqualNode(element.children[0])) {\n                inputs[index + 1].focus()\n                return\n            }\n        }\n    }\n\n    render() {\n        const awef = this.props.first === true ? 'Enter a problem' : 'Because ...'\n        const items = []\n        for(let i=0; i<this.state.childComponents; i++) {\n            const childId = this.props.id + i * 100 + 1\n            items.push(<WhyComponent first={false} id={childId}/>)\n        }\n\n        return (\n            <div>\n                <form className=\"Why-component\" onSubmit={(e) => (this.handleSubmit(e))}>\n                    <input type=\"text\" name=\"name\" placeholder={awef} id={String(this.props.id)}/>\n                    <button>Why</button>\n                </form>\n                <div className=\"Why-component-children\">\n                    {items}\n                </div>\n            </div>\n            \n        );\n    }\n  }","import React from 'react'\nimport HeaderComponent from './content/HeaderComponent'\nimport WhyComponent from './content/WhyComponent'\nimport './App.css'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderComponent />\n      <p>What is something bad that happened?</p>\n      <WhyComponent first={true} id={1}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}